{"remainingRequest":"E:\\Document\\Kì 1 năm 4\\CNLTTH\\Project_QLKS\\BTL_CNLTTH_T5\\QuanLyKhachSanCli\\node_modules\\babel-loader\\lib\\index.js!E:\\Document\\Kì 1 năm 4\\CNLTTH\\Project_QLKS\\BTL_CNLTTH_T5\\QuanLyKhachSanCli\\node_modules\\ts-loader\\index.js??ref--13-2!E:\\Document\\Kì 1 năm 4\\CNLTTH\\Project_QLKS\\BTL_CNLTTH_T5\\QuanLyKhachSanCli\\src\\auth.ts","dependencies":[{"path":"E:\\Document\\Kì 1 năm 4\\CNLTTH\\Project_QLKS\\BTL_CNLTTH_T5\\QuanLyKhachSanCli\\src\\auth.ts","mtime":1606271908130},{"path":"E:\\Document\\Kì 1 năm 4\\CNLTTH\\Project_QLKS\\BTL_CNLTTH_T5\\QuanLyKhachSanCli\\.babelrc","mtime":1606271890641},{"path":"E:\\Document\\Kì 1 năm 4\\CNLTTH\\Project_QLKS\\BTL_CNLTTH_T5\\QuanLyKhachSanCli\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1606271892512},{"path":"E:\\Document\\Kì 1 năm 4\\CNLTTH\\Project_QLKS\\BTL_CNLTTH_T5\\QuanLyKhachSanCli\\node_modules\\babel-loader\\lib\\index.js","mtime":1606271892289},{"path":"E:\\Document\\Kì 1 năm 4\\CNLTTH\\Project_QLKS\\BTL_CNLTTH_T5\\QuanLyKhachSanCli\\node_modules\\ts-loader\\index.js","mtime":1606271904472}],"contextDependencies":[],"result":["import router from './router';\nimport store from './store/store';\nimport apisServer from './apisServer';\nimport axios from 'axios';\nimport { HTTPSingleton } from '@/HTTPServices';\n/**\r\n * @var{string} LOGIN_URL The endpoint for logging in. This endpoint should be proxied by Webpack dev server\r\n *    and maybe nginx in production (cleaner calls and avoids CORS issues).\r\n */\n\nvar LOGIN_URL = apisServer.AUTH_LOGIN;\n/**\r\n * @var{string} REFRESH_TOKEN_URL The endpoint for refreshing an access_token. This endpoint should be proxied\r\n *    by Webpack dev server and maybe nginx in production (cleaner calls and avoids CORS issues).\r\n */\n\nvar REFRESH_TOKEN_URL = apisServer.AUTH_LOGIN;\n/**\r\n *\r\n */\n\nexport default {\n  /**\r\n   * Login\r\n   *\r\n   * @param {Object.<string>} creds The username and password for logging in.\r\n   * @param {string|null} redirect The name of the Route to redirect to.\r\n   * @return {Promise}\r\n   */\n  login: function login(creds, redirect) {\n    var _this = this;\n\n    var promise = new Promise(function (resolve, reject) {\n      axios.post(LOGIN_URL, creds).then(function (response) {\n        if (response.data === 'Login failed!') {\n          reject(response.data);\n          return;\n        }\n\n        _this._storeToken(response.data);\n\n        HTTPSingleton.getInstance().setAccessToken();\n\n        if (redirect) {\n          router.push({\n            path: '/' + redirect,\n            name: redirect\n          });\n          location.reload();\n        }\n\n        resolve(response.data);\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n    return promise;\n  },\n\n  /**\r\n   * Logout\r\n   *\r\n   * Clear all data in our Vuex store (which resets logged-in status) and redirect back\r\n   * to login form.\r\n   *\r\n   * @return {void}\r\n   */\n  logout: function logout() {\n    store.commit('CLEAR_ALL_DATA');\n    router.push({\n      name: 'login'\n    });\n  },\n\n  /**\r\n   * Set the Authorization header on a Vue-resource Request.\r\n   *\r\n   * @param {Request} request The Vue-Resource Request instance to set the header on.\r\n   * @return {void}\r\n   */\n  setAuthHeader: function setAuthHeader(request) {\n    request.headers.set('access_token', store.state.user.AccessToken.Token); // The demo Oauth2 server we are using requires this param, but normally you only set the header.\n\n    /* eslint-disable camelcase */\n\n    request.params.access_token = store.state.user.AccessToken.Token;\n  },\n\n  /**\r\n   * Store tokens\r\n   *\r\n   * Update the Vuex store with the access/refresh tokens received from the response from\r\n   * the Oauth2 server.\r\n   *\r\n   * @private\r\n   * @param {Response} response Vue-resource Response instance from an OAuth2 server.\r\n   *      that contains our tokens.\r\n   * @return {void}\r\n   */\n  _storeToken: function _storeToken(data) {\n    store.commit('UPDATE_USER', data);\n  }\n};",{"version":3,"sources":["E:\\Document\\Kì 1 năm 4\\CNLTTH\\Project_QLKS\\BTL_CNLTTH_T5\\QuanLyKhachSanCli\\src\\auth.ts"],"names":[],"mappings":"AAAA,OAAO,MAAP,MAAmB,UAAnB;AACA,OAAO,KAAP,MAAkB,eAAlB;AAEA,OAAO,UAAP,MAAuB,cAAvB;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,aAAT,QAA8B,gBAA9B;AAGA;;;;;AAIA,IAAM,YAAY,WAAW,UAA7B;AAEA;;;;;AAIA,IAAM,oBAAoB,WAAW,UAArC;AAEA;;;;AAGA,eAAe;AAEX;;;;;;;AAOA,OATW,iBASL,KATK,EASO,QATP,EASoB;AAAA;;AAC3B,QAAI,UAAU,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AAC1C,YAAM,IAAN,CAAW,SAAX,EAAsB,KAAtB,EAA6B,IAA7B,CAAkC,UAAC,QAAD,EAAkB;AAChD,YAAI,SAAS,IAAT,KAAkB,eAAtB,EAAuC;AACnC,iBAAO,SAAS,IAAhB;AACA;AACH;;AACD,cAAK,WAAL,CAAiB,SAAS,IAA1B;;AACA,sBAAc,WAAd,GAA4B,cAA5B;;AACA,YAAI,QAAJ,EAAc;AACV,iBAAO,IAAP,CAAY;AACR,kBAAM,MAAM,QADJ;AAER,kBAAM;AAFE,WAAZ;AAIA,mBAAS,MAAT;AAEH;;AACD,gBAAQ,SAAS,IAAjB;AACH,OAhBD,EAgBG,KAhBH,CAgBS,eAAM;AACX,eAAO,GAAP;AACH,OAlBD;AAmBH,KApBa,CAAd;AAqBA,WAAO,OAAP;AACH,GAhCU;;AAkCX;;;;;;;;AAQA,QA1CW,oBA0CL;AACF,UAAM,MAAN,CAAa,gBAAb;AACA,WAAO,IAAP,CAAY;AACR,YAAM;AADE,KAAZ;AAGH,GA/CU;;AAkDX;;;;;;AAMA,eAxDW,yBAwDG,OAxDH,EAwDe;AACtB,YAAQ,OAAR,CAAgB,GAAhB,CAAoB,cAApB,EAAoC,MAAM,KAAN,CAAY,IAAZ,CAAiB,WAAjB,CAA6B,KAAjE,EADsB,CAEtB;;AACA;;AACA,YAAQ,MAAR,CAAe,YAAf,GAA8B,MAAM,KAAN,CAAY,IAAZ,CAAiB,WAAjB,CAA6B,KAA3D;AACH,GA7DU;;AA+DX;;;;;;;;;;;AAWA,aA1EW,uBA0EC,IA1ED,EA0EU;AACjB,UAAM,MAAN,CAAa,aAAb,EAA4B,IAA5B;AACH;AA5EU,CAAf","sourcesContent":["import router from './router';\r\nimport store from './store/store';\r\n\r\nimport apisServer from './apisServer';\r\nimport axios from 'axios';\r\nimport { HTTPSingleton } from '@/HTTPServices';\r\nimport { debug } from 'util';\r\n\r\n/**\r\n * @var{string} LOGIN_URL The endpoint for logging in. This endpoint should be proxied by Webpack dev server\r\n *    and maybe nginx in production (cleaner calls and avoids CORS issues).\r\n */\r\nconst LOGIN_URL = apisServer.AUTH_LOGIN;\r\n\r\n/**\r\n * @var{string} REFRESH_TOKEN_URL The endpoint for refreshing an access_token. This endpoint should be proxied\r\n *    by Webpack dev server and maybe nginx in production (cleaner calls and avoids CORS issues).\r\n */\r\nconst REFRESH_TOKEN_URL = apisServer.AUTH_LOGIN;\r\n\r\n/**\r\n * \r\n */\r\nexport default {\r\n\r\n    /**\r\n     * Login\r\n     *\r\n     * @param {Object.<string>} creds The username and password for logging in.\r\n     * @param {string|null} redirect The name of the Route to redirect to.\r\n     * @return {Promise}\r\n     */\r\n    login(creds: any, redirect: any) {\r\n        let promise = new Promise((resolve, reject) => {\r\n            axios.post(LOGIN_URL, creds).then((response: any) => {\r\n                if (response.data === 'Login failed!') {\r\n                    reject(response.data);\r\n                    return;\r\n                }\r\n                this._storeToken(response.data);\r\n                HTTPSingleton.getInstance().setAccessToken();\r\n                if (redirect) {\r\n                    router.push({\r\n                        path: '/' + redirect,\r\n                        name: redirect\r\n                    });\r\n                    location.reload();\r\n\r\n                }\r\n                resolve(response.data);\r\n            }).catch(err => {\r\n                reject(err);\r\n            });\r\n        })\r\n        return promise\r\n    },\r\n\r\n    /**\r\n     * Logout\r\n     *\r\n     * Clear all data in our Vuex store (which resets logged-in status) and redirect back\r\n     * to login form.\r\n     *\r\n     * @return {void}\r\n     */\r\n    logout() {\r\n        store.commit('CLEAR_ALL_DATA')\r\n        router.push({\r\n            name: 'login'\r\n        })\r\n    },\r\n\r\n\r\n    /**\r\n     * Set the Authorization header on a Vue-resource Request.\r\n     *\r\n     * @param {Request} request The Vue-Resource Request instance to set the header on.\r\n     * @return {void}\r\n     */\r\n    setAuthHeader(request: any) {\r\n        request.headers.set('access_token', store.state.user.AccessToken.Token);\r\n        // The demo Oauth2 server we are using requires this param, but normally you only set the header.\r\n        /* eslint-disable camelcase */\r\n        request.params.access_token = store.state.user.AccessToken.Token;\r\n    },\r\n\r\n    /**\r\n     * Store tokens\r\n     *\r\n     * Update the Vuex store with the access/refresh tokens received from the response from\r\n     * the Oauth2 server.\r\n     *\r\n     * @private\r\n     * @param {Response} response Vue-resource Response instance from an OAuth2 server.\r\n     *      that contains our tokens.\r\n     * @return {void}\r\n     */\r\n    _storeToken(data: any) {\r\n        store.commit('UPDATE_USER', data);\r\n    }\r\n}\r\n"],"sourceRoot":""}]}